{"version":3,"sources":["src/js/main.js"],"names":["setAttributes","el","attributeAndValue","Object","entries","forEach","attribute","value","setAttribute","nickname","gameInterval","svgNS","gameContainer","document","querySelector","cellWH","gameW","gameH","svg","createElementNS","scoreContainer","scoreCount","direction","bodyCells","createBodyCell","geico","form","initGame","createSvg","initialView","setInterval","updatePosition","x","y","isGeico","cell","setAttributeNS","classList","add","position","viewBox","width","height","append","getXdif","getYdif","snakeHead","length","slice","snakeNeck","newCell","unshift","setTimeout","remove","innerHTML","Math","floor","random","checkIfCollision","clearInterval","gameOver","collision","addEventListener","e","preventDefault","passive","directions","ArrowRight","ArrowLeft","ArrowDown","ArrowUp","undefined","key","gameOverEl","contains","playAgain","postScore","resultsObject","postData","apiURL","name","score","getResults","then","updateLeaderboard","sortedResultsList","leaderboard","fetch","response","json","data","gameResults","reduce","acc","item","resultsList","map","obj","sort","a","b","values","li","createElement","keys","appendChild","url","method","mode","cache","headers","redirect","referrerPolicy","body","JSON","stringify"],"mappings":"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","file":"main.334a1f48.js","sourceRoot":"..","sourcesContent":["// import CircularSlider from './CircularSlider'\n\nfunction setAttributes(el, attributeAndValue) {\n  Object.entries(attributeAndValue).forEach(([attribute, value]) => {\n    el.setAttribute(attribute, value)\n  })\n}\nconst svgNS = 'http://www.w3.org/2000/svg'\nconst gameContainer = document.querySelector('.game-container')\nconst cellWH = 22\nconst gameW = 20\nconst gameH = 30\nconst svg = document.createElementNS(svgNS, 'svg')\nconst scoreContainer = document.querySelector('.score-counter')\nlet scoreCount = 0\nlet direction = 1\nlet bodyCells = [createBodyCell(), createBodyCell(1, 0)]\nlet geico = createBodyCell(3, 3, true)\nconst form = document.querySelector('#nickname')\nlet nickname\nlet gameInterval\n\nform.addEventListener(\n  'submit',\n  (e) => {\n    e.preventDefault()\n    nickname = document.querySelector('input[type=\"text\"]').value\n    if (nickname !== '') {\n      document.querySelector('.welcome').classList.add('hide')\n      initGame()\n    }\n  },\n  { passive: false }\n)\n\nfunction initGame() {\n  createSvg()\n  initialView()\n  gameInterval = setInterval(function () {\n    updatePosition()\n  }, 110)\n}\n\nfunction createBodyCell(x = 0, y = 0, isGeico = false) {\n  const cell = document.createElementNS(svgNS, 'rect')\n  cell.setAttributeNS(null, 'x', x * cellWH)\n  cell.setAttributeNS(null, 'y', y * cellWH)\n  cell.setAttributeNS(null, 'height', cellWH)\n  cell.setAttributeNS(null, 'width', cellWH)\n  cell.setAttributeNS(null, 'opacity', 1)\n  cell.setAttributeNS(null, 'fill', isGeico ? '#000000d9' : 'hotpink')\n\n  if (isGeico) {\n    cell.setAttributeNS(null, 'rx', `${cellWH / 2}`)\n    cell.setAttributeNS(null, 'ry', `${cellWH / 2}`)\n    cell.classList.add('geico')\n  } else {\n    cell.setAttributeNS(null, 'rx', '2')\n    cell.setAttributeNS(null, 'ry', '2')\n  }\n\n  cell.position = { x, y }\n\n  return cell\n}\n\nfunction createSvg() {\n  setAttributes(svg, {\n    viewBox: `0 0 ${gameW * cellWH} ${gameH * cellWH}`,\n    width: gameW * cellWH,\n    height: gameH * cellWH,\n  })\n\n  gameContainer.append(svg)\n}\n\nfunction getXdif() {\n  if (direction === 1) {\n    return 1\n  }\n  if (direction === 3) {\n    return -1\n  }\n  return 0\n}\nfunction getYdif() {\n  if (direction === 2) {\n    return 1\n  }\n  if (direction === 4) {\n    return -1\n  }\n  return 0\n}\n\nfunction updatePosition() {\n  bodyCells = [bodyCells[bodyCells.length - 1], ...bodyCells.slice(0, bodyCells.length - 1)]\n\n  const snakeHead = bodyCells[0]\n  const snakeNeck = bodyCells[1] || bodyCells[0]\n\n  snakeHead.position.x = snakeNeck.position.x + getXdif()\n  snakeHead.position.y = snakeNeck.position.y + getYdif()\n\n  if (snakeHead.position.x === geico.position.x && snakeHead.position.y === geico.position.y) {\n    // const newCell = createBodyCell(geico.position.x + getXdif(), geico.position.y + getYdif())\n    const newCell = createBodyCell(geico.position.x, geico.position.y)\n    svg.append(newCell)\n    bodyCells.unshift(newCell)\n    scoreCount += 10\n\n    scoreContainer.classList.add('active')\n\n    setTimeout(() => {\n      scoreContainer.classList.remove('active')\n    }, 300)\n    scoreContainer.innerHTML = `<span>Score: ${scoreCount}</span>`\n\n    geico.position = {\n      x: Math.floor(Math.random(1) * gameW),\n      y: Math.floor(Math.random(1) * gameH),\n    }\n\n    geico.setAttributeNS(null, 'x', geico.position.x * cellWH)\n    geico.setAttributeNS(null, 'y', geico.position.y * cellWH)\n  }\n\n  if (\n    snakeHead.position.x < 0 ||\n    snakeHead.position.x > gameW - 1 ||\n    snakeHead.position.y < 0 ||\n    snakeHead.position.y > gameH - 1 ||\n    checkIfCollision()\n  ) {\n    clearInterval(gameInterval)\n    gameOver()\n  } else {\n    snakeHead.setAttributeNS(null, 'x', snakeHead.position.x * cellWH)\n    snakeHead.setAttributeNS(null, 'y', snakeHead.position.y * cellWH)\n  }\n}\n\n// collision with self\nfunction checkIfCollision() {\n  const snakeHead = bodyCells[0]\n  let collision = false\n  bodyCells.slice(4).forEach(function (cell) {\n    if (cell.position.x === snakeHead.position.x && cell.position.y === snakeHead.position.y) {\n      collision = true\n    }\n  })\n\n  return collision\n}\n\nfunction initialView() {\n  bodyCells.forEach((el) => {\n    svg.append(el)\n  })\n  svg.append(geico)\n}\n\ndocument.addEventListener(\n  'keydown',\n  (e) => {\n    const directions = {\n      ArrowRight: 1,\n      ArrowLeft: 3,\n      ArrowDown: 2,\n      ArrowUp: 4,\n      ' ': 'stop',\n    }\n\n    if (directions[e.key] !== undefined) {\n      e.preventDefault()\n      if (\n        (direction === 1 && e.key !== 'ArrowLeft') ||\n        (direction === 2 && e.key !== 'ArrowUp') ||\n        (direction === 3 && e.key !== 'ArrowRidht') ||\n        (direction === 4 && e.key !== 'ArrowDown')\n      ) {\n        direction = directions[e.key]\n      }\n    }\n\n    if (e.key === 'Enter' && gameOverEl.classList.contains('active')) {\n      playAgain()\n    }\n  },\n  { passive: false }\n)\n\nconst gameOverEl = document.querySelector('.game-over')\n\nfunction gameOver() {\n  gameOverEl.classList.add('active')\n  gameOverEl.querySelector(\n    '.score'\n  ).innerHTML = `<span>${nickname}</span>, you scored <span>${scoreCount}</span> points`\n\n  postScore()\n}\n\nasync function postScore() {\n  if (resultsObject[nickname] === undefined || resultsObject[nickname] < scoreCount) {\n    await postData(apiURL, { name: nickname, score: scoreCount })\n\n    getResults().then(() => {\n      updateLeaderboard()\n    })\n  }\n}\n\ndocument.querySelector('.play-again').addEventListener('click', playAgain)\n\nfunction playAgain() {\n  gameOverEl.classList.remove('active')\n  scoreCount = 0\n  scoreContainer.innerHTML = `<span>Score: ${scoreCount}</span>`\n  bodyCells = [createBodyCell(), createBodyCell(1, 0)]\n  geico = createBodyCell(3, 3, true)\n  gameContainer.querySelector('svg').innerHTML = ''\n  direction = 1\n  initialView()\n  gameInterval = setInterval(function () {\n    updatePosition()\n  }, 110)\n}\n\nconst apiURL = 'https://sloenduro-results.herokuapp.com/api/snake-results'\nlet resultsObject\nlet sortedResultsList\nlet leaderboard = document.querySelector('.leaderboard')\n\nasync function getResults() {\n  await fetch(apiURL)\n    .then((response) => response.json())\n    .then((data) => {\n      gameResults = data\n\n      resultsObject = gameResults.reduce((acc, item) => {\n        if (acc[item.name] === undefined || acc[item.name] < item.score) {\n          acc[item.name] = item.score\n        }\n\n        return acc\n      }, {})\n\n      resultsList = [...Object.entries(resultsObject)]\n        .map((item) => {\n          let obj = {}\n          obj[item[0]] = item[1]\n          return obj\n        })\n        .sort((a, b) => Object.values(b)[0] - Object.values(a)[0])\n    })\n}\n\ngetResults().then(() => {\n  updateLeaderboard()\n})\n\nfunction updateLeaderboard() {\n  leaderboard.innerHTML = ''\n\n  resultsList.forEach((el) => {\n    let li = document.createElement('li')\n    li.innerHTML = `${Object.keys(el)[0]}: ${Object.values(el)[0]}`\n    Object.keys(el)[0] === nickname && li.classList.add('current')\n    leaderboard.appendChild(li)\n  })\n}\n\nasync function postData(url = '', data = {}) {\n  // Default options are marked with *\n  const response = await fetch(url, {\n    method: 'POST', // *GET, POST, PUT, DELETE, etc.\n    mode: 'cors', // no-cors, *cors, same-origin\n    cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    redirect: 'follow', // manual, *follow, error\n    referrerPolicy: 'no-referrer', // no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url\n    body: JSON.stringify(data), // body data type must match \"Content-Type\" header\n  })\n}\n"]}